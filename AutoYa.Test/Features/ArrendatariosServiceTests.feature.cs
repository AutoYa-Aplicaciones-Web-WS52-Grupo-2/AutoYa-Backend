// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AutoYa.Test.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ArrendatariosServiceTestsFeature : object, Xunit.IClassFixture<ArrendatariosServiceTestsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ArrendatariosServiceTests.feature"
#line hidden
        
        public ArrendatariosServiceTestsFeature(ArrendatariosServiceTestsFeature.FixtureData fixtureData, AutoYa_Test_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "ArrendatariosServiceTests", "\tAs a arrendatario\r\n\tI want to add my information to AutoYa\'s system\r\n\tIn order t" +
                    "o make it available for applications.\t", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
 #line hidden
#line 7
  testRunner.Given("the Endpoint http://localhost:5267/api/v1/arrendatarios is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add Arrendatario with unique Email")]
        [Xunit.TraitAttribute("FeatureTitle", "ArrendatariosServiceTests")]
        [Xunit.TraitAttribute("Description", "Add Arrendatario with unique Email")]
        [Xunit.TraitAttribute("Category", "arrendatario-adding")]
        public virtual void AddArrendatarioWithUniqueEmail()
        {
            string[] tagsOfScenario = new string[] {
                    "arrendatario-adding"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Arrendatario with unique Email", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 10
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Nombres",
                            "Apellidos",
                            "FechaNacimiento",
                            "Telefono",
                            "Correo",
                            "AntecedentesPenalesPdf",
                            "Contrasenia"});
                table3.AddRow(new string[] {
                            "Erick",
                            "Urbi",
                            "2023-11-18T16:07:53.406Z",
                            "123456789",
                            "erick@hotmail.com",
                            "misAntecedentes",
                            "password"});
#line 12
  testRunner.When("a Post Request for arrendatario is sent", ((string)(null)), table3, "When ");
#line hidden
#line 16
  testRunner.Then("a Response is received with Status 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Nombres",
                            "Apellidos",
                            "FechaNacimiento",
                            "Telefono",
                            "Correo",
                            "AntecedentesPenalesPdf",
                            "Contrasenia"});
                table4.AddRow(new string[] {
                            "1",
                            "Erick",
                            "Urbi",
                            "2023-11-18T16:07:53.406Z",
                            "123456789",
                            "erick@hotmail.com",
                            "misAntecedentes",
                            "password"});
#line 18
  testRunner.And("an Arrendatario Resource is included in Response body", ((string)(null)), table4, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add Arrendatario with existing Email")]
        [Xunit.TraitAttribute("FeatureTitle", "ArrendatariosServiceTests")]
        [Xunit.TraitAttribute("Description", "Add Arrendatario with existing Email")]
        [Xunit.TraitAttribute("Category", "arrendatario-adding")]
        public virtual void AddArrendatarioWithExistingEmail()
        {
            string[] tagsOfScenario = new string[] {
                    "arrendatario-adding"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Arrendatario with existing Email", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 23
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Nombres",
                            "Apellidos",
                            "FechaNacimiento",
                            "Telefono",
                            "Correo",
                            "AntecedentesPenalesPdf",
                            "Contrasenia"});
                table5.AddRow(new string[] {
                            "1",
                            "Gabriel",
                            "Alvarez",
                            "2023-11-18T16:07:53.406Z",
                            "987654321",
                            "gabriel@hotmail.com",
                            "misAntecedentes2",
                            "password2"});
#line 25
  testRunner.Given("An Arrendatario is already stored", ((string)(null)), table5, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Nombres",
                            "Apellidos",
                            "FechaNacimiento",
                            "Telefono",
                            "Correo",
                            "AntecedentesPenalesPdf",
                            "Contrasenia"});
                table6.AddRow(new string[] {
                            "Gabriel",
                            "Alvarez",
                            "2023-11-18T16:07:53.406Z",
                            "987654321",
                            "gabriel@hotmail.com",
                            "misAntecedentes2",
                            "password2"});
#line 29
  testRunner.When("a Post Request for arrendatario is sent", ((string)(null)), table6, "When ");
#line hidden
#line 33
  testRunner.Then("a Response is received with Status 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
  testRunner.And("An Error Message for arrendatario is returned with value \"Ya existe un arrendatar" +
                        "io registrado con el correo electrónico gabriel@hotmail.com.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ArrendatariosServiceTestsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ArrendatariosServiceTestsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
