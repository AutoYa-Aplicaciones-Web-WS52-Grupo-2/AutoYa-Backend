// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AutoYa.Test.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class VehiculosServiceTestsFeature : object, Xunit.IClassFixture<VehiculosServiceTestsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "VehiculosServiceTests.feature"
#line hidden
        
        public VehiculosServiceTestsFeature(VehiculosServiceTestsFeature.FixtureData fixtureData, AutoYa_Test_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "VehiculosServiceTests", "As a arrendatario\r\nI want to add my vehicule\'s information to AutoYa\'s system\r\nIn" +
                    " order to make it available for applications.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
    #line hidden
#line 7
        testRunner.Given("the Endpoint http://localhost:5267/api/v1/vehiculos is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add vehiculo")]
        [Xunit.TraitAttribute("FeatureTitle", "VehiculosServiceTests")]
        [Xunit.TraitAttribute("Description", "Add vehiculo")]
        [Xunit.TraitAttribute("Category", "vehiculo-adding")]
        public virtual void AddVehiculo()
        {
            string[] tagsOfScenario = new string[] {
                    "vehiculo-adding"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add vehiculo", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 10
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Marca",
                            "Modelo",
                            "VelocidadMax",
                            "Consumo",
                            "Dimensiones",
                            "Peso",
                            "Clase",
                            "Transmision",
                            "Tiempo",
                            "TipoTiempo",
                            "CostoAlquiler",
                            "LugarRecojo",
                            "UrlImagen",
                            "ContratoAlquilerPdf",
                            "EstadoRenta",
                            "propietarioId",
                            "arrendatarioId",
                            "alquilerId"});
                table11.AddRow(new string[] {
                            "Toyota",
                            "Camry",
                            "200",
                            "8",
                            "Medium",
                            "1500",
                            "Sedan",
                            "Automatica",
                            "5",
                            "Día",
                            "50",
                            "Lima",
                            "image.jpg",
                            "contrato.pdf",
                            "Disponible",
                            "1",
                            "null",
                            "null"});
#line 12
        testRunner.When("a Post Request for vehiculo is sent", ((string)(null)), table11, "When ");
#line hidden
#line 16
        testRunner.Then("a Response for vehiculo is received with Status 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Marca",
                            "Modelo",
                            "VelocidadMax",
                            "Consumo",
                            "Dimensiones",
                            "Peso",
                            "Clase",
                            "Transmision",
                            "Tiempo",
                            "TipoTiempo",
                            "CostoAlquiler",
                            "LugarRecojo",
                            "UrlImagen",
                            "ContratoAlquilerPdf",
                            "EstadoRenta",
                            "propietario.id",
                            "propietario.nombres",
                            "propietario.apellidos",
                            "propietario.fechaNacimiento",
                            "propietario.telefono",
                            "propietario.correo",
                            "propietario.contrasenia",
                            "arrendatario",
                            "alquiler"});
                table12.AddRow(new string[] {
                            "1",
                            "Toyota",
                            "Camry",
                            "200",
                            "8",
                            "Medium",
                            "1500",
                            "Sedan",
                            "Automatica",
                            "5",
                            "Día",
                            "50",
                            "Lima",
                            "image.jpg",
                            "contrato.pdf",
                            "Disponible",
                            "1",
                            "\"Erick\"",
                            "\"Urbi\"",
                            "\"2023-11-18T11:07:53.406\"",
                            "123456789",
                            "\"erick@hotmail.com\"",
                            "\"password\"",
                            "null",
                            "null"});
#line 18
        testRunner.And("a vehiculo Resource is included in Response body", ((string)(null)), table12, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                VehiculosServiceTestsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                VehiculosServiceTestsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
